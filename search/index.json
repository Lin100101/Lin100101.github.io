[{"content":"在Java编程中，工程（Project）、模块（Module）、包（Package）和类（Class）是组织代码的重要概念。下面我将分别介绍这些概念。\n工程（Project） 一个工程指的是一个完整的项目或应用程序，通常包含多个模块、包和类。它是一个高层次的概念，代表了一个开发任务的整体。例如，在IDE（集成开发环境）中创建一个新的Java项目时，这个项目就是一个工程。\n模块（Module） 模块是在Java 9引入的一个新特性，用于更好地组织大型程序的代码，并控制不同部分之间的可见性和依赖关系。模块通过module-info.java文件来声明其名称、依赖关系以及其他配置信息。模块使得代码更加清晰和安全，因为它允许你明确地指定哪些包是可以被其他模块访问的。\n包（Package） 包是用来组织类的一种方式，类似于文件夹的作用。包有助于避免类名冲突，并使项目的结构更加清晰。每个包都有一个唯一的全限定名（Fully Qualified Name），通常是反向域名的形式，比如com.example.myapp。在一个包中的所有类共享同一个命名空间，因此可以通过包名来区分不同的类。\n类（Class） 类是面向对象编程的基本构建块，它是对一类事物的抽象描述。一个类定义了对象的行为和状态，包括属性（成员变量）和方法（行为）。类是实例化的模板，而实例化的对象称为类的对象或实例。例如，你可以有一个名为Car的类，它可以有属性如颜色、品牌等，以及方法如启动引擎、加速等。\n关系总结 工程包含模块：一个工程可以包含一个或多个模块。 模块包含包：一个模块可以包含一个或多个包。 包包含类：一个包可以包含一个或多个类。 ","date":"2025-03-03T11:26:47+08:00","permalink":"https://Lin100101.github.io/p/%E6%9E%84%E5%BB%BAjava%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97%E5%8C%85%E4%B8%8E%E7%B1%BB/","title":"构建Java项目的核心组件：工程、模块、包与类"},{"content":"Java作为一种广泛使用的面向对象编程语言，其设计和规范中包含了一系列严格的文件和类命名规则。这些规则对于确保代码的可读性、可维护性和互操作性至关重要。 例如：如果一个 Java 文件中包含了一个 public 类，那么这个文件的名称必须与这个 public 类的名称完全相同。这是Java语言的一个强制性规则。例如，如果你有一个 public class SimpleDemo，那么这个类必须保存在名为 SimpleDemo.java 的文件中。\n1 2 3 4 5 public class SimpleDemo { public static void main(String[] args) { System.out.println(\u0026#34;这是一个简单的Java程序。\u0026#34;); } } 在这种情况下，编译完后的class文件名也是SimpleDemo。\n如果 Java 文件中没有 public 类，则文件名可以是任意的，尽管通常的做法是根据文件中最重要的类来命名文件，以提高代码的可读性和可维护性。 此时我们要把一个包含有一个名叫SimpleDemo非public的类的Java文件名改成test.java,这种操作是没错的，只是不符合规范而已。随后我们javac test.java,然后再java test。\njava test这个操作是错误的，让我们看看javac test.java之后产生了什么文件。\n所以java SimpleDemo才是正确的操作 此外Java是大小写敏感的语言，这意味着 MyClass 和 myclass 会被视为两个不同的标识符。因此，文件名必须精确匹配类名的大小写。 虽然你可以将不带 public 修饰符的 SimpleDemo 类放在名为 test.java 的文件中，但这并不符合常见的最佳实践。按照最佳实践，即便类不是 public 的，最好还是让文件名与类名保持一致，即命名为 SimpleDemo.java，这样有助于提高代码的可读性和维护性。此外，遵循这些惯例也使得项目更易于被其他开发者理解。\n总之，严格遵守Java的文件和类命名规则不仅有助于编写高质量的代码，还能提升开发效率，降低维护成本，并确保应用程序的稳定性和扩展性。这些规则是构建大型复杂系统的基础，也是实现良好软件工程实践的重要组成部分。 ","date":"2025-02-26T18:30:15+08:00","permalink":"https://Lin100101.github.io/p/%E6%8E%A2%E7%B4%A2java%E6%97%A0public%E7%B1%BB%E6%97%B6%E7%9A%84%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%8C%87%E5%8D%97/","title":"探索Java：无Public类时的文件命名与执行指南"},{"content":"test ","date":"2025-01-29T15:01:31+08:00","permalink":"https://Lin100101.github.io/p/test/","title":"Test"}]